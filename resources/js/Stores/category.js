// Stores/category.js
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import axios from 'axios'

export const useCategoryStore = defineStore('category', () => {
  const activeCategory = ref(null)
  const navCategories = ref([])
  const isLoaded = ref(false)
  const isLoading = ref(false)

  async function loadCategories() {
    if (isLoaded.value || isLoading.value) return
    isLoading.value = true
    try {
      const res = await axios.get('/layout-data')
      navCategories.value = res.data.navCategories
      isLoaded.value = true
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ navCategories:', e)
    } finally {
      isLoading.value = false
    }
  }

  // üîπ –í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
  const allSubcategories = computed(() =>
    navCategories.value.flatMap((parent) =>
      (parent.children || []).map((sub) => ({
        ...sub,
        parent_id: parent.id,
        parent_name: parent.translation?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        // fallback –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø —Ä–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —É —Å–∞–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ
        logo: sub.logo ?? parent.logo ?? null,
      }))
    )
  )

  // üîπ –ò—â–µ–º –ª–∏–±–æ —Ä–æ–¥–∏—Ç–µ–ª—è, –ª–∏–±–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë –¥–µ—Ç–µ–π
  function openCategory(categoryId) {
    // 1) –†–æ–¥–∏—Ç–µ–ª—å?
    const parent = navCategories.value.find((c) => c.id === categoryId)
    if (parent) {
      activeCategory.value = {
        id: parent.id,
        name: parent.translation?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        children: (parent.children || []).map((sub) => ({
          id: sub.id,
          name: sub.translation?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        })),
      }
      return
    }

    // 2) –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è?
    for (const p of navCategories.value) {
      const sub = (p.children || []).find((c) => c.id === categoryId)
      if (sub) {
        activeCategory.value = {
          id: sub.id,
          name: sub.translation?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          children: (sub.children || []).map((s) => ({
            id: s.id,
            name: s.translation?.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          })),
        }
        return
      }
    }
  }

  function closeCategory() {
    activeCategory.value = null
  }

  function reset() {
    isLoaded.value = false
    navCategories.value = []
  }

  return {
    activeCategory,
    navCategories,
    isLoaded,
    isLoading,
    loadCategories,
    allSubcategories,
    openCategory,
    closeCategory,
    reset,
  }
})
