import { defineStore } from 'pinia'
import axios from 'axios'
import { useAppStateStore } from './appState'

export const useFavoritesStore = defineStore('favorites', {
  state: () => ({
    items: [], // –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
  }),

  getters: {
    // üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    count: (state) => state.items.length,

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    isFavorite: (state) => (id) => state.items.some((p) => p.id === id),
  },

  actions: {
    // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async load() {
      const res = await axios.get(route('favorites.data'))
      this.items = res.data.products

      const app = useAppStateStore()
      app.markLoaded('favorites')
    },

    // üîπ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º (–ª–æ–∫–∞–ª—å–Ω–æ + –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    localToggle(product) {
      const index = this.items.findIndex((p) => p.id === product.id)

      if (index !== -1) {
        // –£–¥–∞–ª—è–µ–º
        this.items.splice(index, 1)
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º
        this.items.push(product)
      }

      // üîÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      axios.post(route('favorites.toggle'), { product_id: product.id }).catch(() => {
        if (index === -1) {
          this.items = this.items.filter((p) => p.id !== product.id)
        } else {
          this.items.push(product)
        }
      })
    },

    // üîπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    async remove(productId) {
      await axios.delete(route('favorites.remove', productId))
      this.items = this.items.filter((p) => p.id !== productId)
    },

    // üîπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
    async clear() {
      await axios.delete(route('favorites.clear'))
      this.items = []
    },
  },
})
